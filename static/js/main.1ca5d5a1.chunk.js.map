{"version":3,"sources":["assets/media/phone3d_fr.glb","assets/media/phone3d.glb","text/matcap_03.jpg","logo.svg","components/Phone3D.js","App.js","reportWebVitals.js","index.js"],"names":["Phone3D","props","state","isForward","domContainer","isAnimated","naturalRotationEnabled","rotateStart","THREE","rotateEnd","rotateDelta","naturalRotateSpeed","naturalFriction","baseRotationFriction","zoomFriction","textureFriction","phoneObject","headerFooterObject","naturalDestination","naturalRotation","target","spherical","sphericalDelta","defaultCameraZ","zoomDestination","textureDestination","animate","bind","onMouseMove","onDeviceRotation","toggleNaturalRotation","updateBaseRotation","forward","backward","load","handleResize","document","removeEventListener","this","window","addEventListener","prevProps","lang","renderer","setSize","offsetWidth","offsetHeight","x","y","baseRotation","copy","rotation","isLoading3D","setTimeout","dimension","width","height","scene","camera","add","antialias","alpha","physicallyCorrectLights","gammaOutput","gammaFactor","setClearColor","setPixelRatio","devicePixelRatio","appendChild","domElement","light1","name","loader","GLTFLoader","dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","phone3d","require","texture","matcap","default","encoding","gltf","remove","scenes","box","setFromObject","size","getSize","length","center","getCenter","position","z","lookAt","children","material","i","screenObject","clone","map","needsUpdate","onLoadingDone","requestAnimationFrame","undefined","error","console","log","event","preventDefault","clientX","clientY","gamma","beta","time","update","render","from","to","friction","padding","diff","Math","abs","destination","innerWidth","innerHeight","set","logFn","subVectors","multiplyScalar","theta","PI","clientHeight","phi","offset","quat","setFromUnitVectors","up","quatInverse","inverse","sub","applyQuaternion","setFromVector3","makeSafe","radius","setFromSpherical","enabled","percentage","duration","delay","style","transition","transform","className","ref","PureComponent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1ca5d5a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/phone3d_fr.6402fa0c.glb\";","export default __webpack_public_path__ + \"static/media/phone3d.b298f32c.glb\";","export default __webpack_public_path__ + \"static/media/matcap_03.8f79f9c6.jpg\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { PureComponent } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\r\n\r\nimport './Phone3D.css';\r\n\r\nclass Phone3D extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.isForward = true;\r\n\r\n        this.domContainer = null;\r\n        this.isAnimated = false;\r\n\r\n        //Controls\r\n        this.naturalRotationEnabled = true;\r\n\r\n        //Base rotation vectors\r\n        this.rotateStart = new THREE.Vector2();\r\n        this.rotateEnd = new THREE.Vector2();\r\n        this.rotateDelta = new THREE.Vector2();\r\n        this.naturalRotateSpeed = 0.05;\r\n        this.naturalFriction = 0.99;\r\n        this.baseRotationFriction = 0.95;\r\n        this.zoomFriction = 0.95;\r\n        this.textureFriction = 0.9;\r\n\r\n        //Base context\r\n        this.phoneObject = null;\r\n        this.headerFooterObject = null;\r\n        this.naturalDestination = null;\r\n        this.naturalRotation = null;\r\n        this.target = new THREE.Vector3();\r\n        this.spherical = new THREE.Spherical();\r\n        this.sphericalDelta = new THREE.Spherical();\r\n        this.defaultCameraZ = 240 * 1.05;\r\n        this.zoomDestination = this.defaultCameraZ;\r\n        this.textureDestination = new THREE.Vector2(0, 0);\r\n\r\n        //Bindings\r\n        this.animate = this.animate.bind(this);\r\n        this.onMouseMove = this.onMouseMove.bind(this);\r\n        this.onDeviceRotation = this.onDeviceRotation.bind(this);\r\n        this.toggleNaturalRotation = this.toggleNaturalRotation.bind(this);\r\n        this.updateBaseRotation = this.updateBaseRotation.bind(this);\r\n        this.forward = this.forward.bind(this);\r\n        this.backward = this.backward.bind(this);\r\n        this.load = this.load.bind(this);\r\n        this.handleResize = this.handleResize.bind(this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousemove', this.onMouseMove, false);\r\n        window.addEventListener('deviceorientation', this.onDeviceRotation, true);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.load();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.lang && this.props.lang !== prevProps.lang) {\r\n            this.load();\r\n        }\r\n    }\r\n\r\n    handleResize() {\r\n        this.renderer.setSize(this.domContainer.offsetWidth, this.domContainer.offsetHeight);\r\n        this.naturalDestination = { x: this.rotateStart.x, y: this.rotateStart.y };\r\n        if (this.baseRotation) {\r\n            this.baseRotation.copy(this.phoneObject.rotation);\r\n        }\r\n        this.zoomDestination = this.defaultCameraZ;\r\n    }\r\n\r\n    load() {\r\n        if (this.isLoading3D) {\r\n            setTimeout(this.load, 1000);\r\n            return;\r\n        }\r\n        this.isLoading3D = true;\r\n\r\n        const dimension = {\r\n            width: this.domContainer.offsetWidth,\r\n            height: this.domContainer.offsetHeight\r\n        };\r\n\r\n        if (!this.scene) {\r\n            this.scene = new THREE.Scene();\r\n            this.camera = new THREE.PerspectiveCamera(60, dimension.width / dimension.height, 0.01, 1000);\r\n            this.scene.add(this.camera);\r\n\r\n            this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n            this.renderer.setSize(dimension.width, dimension.height);\r\n            this.renderer.physicallyCorrectLights = true;\r\n            this.renderer.gammaOutput = true;\r\n            this.renderer.gammaFactor = 2.2;\r\n            this.renderer.setClearColor(0x000000, 0);\r\n            this.renderer.setPixelRatio(window.devicePixelRatio);\r\n            this.renderer.setSize(dimension.width, dimension.height);\r\n            this.domContainer.appendChild(this.renderer.domElement);\r\n\r\n            const light1 = new THREE.AmbientLight(0xffffff, 3.1);\r\n            light1.name = 'ambient_light';\r\n            this.camera.add(light1);\r\n        }\r\n\r\n        var loader = new GLTFLoader();\r\n        var dracoLoader = new DRACOLoader();\r\n\r\n        dracoLoader.setDecoderPath('/three/draco/');\r\n        loader.setDRACOLoader(dracoLoader);\r\n\r\n        /*\r\n        var texture = new THREE.TextureLoader().load('/three/textures/landing_texture.jpg');\r\n        var materialScreen = new THREE.MeshStandardMaterial({\r\n            map: texture\r\n        });\r\n        var materialNav = new THREE.MeshStandardMaterial({\r\n            map: texture\r\n        });\r\n        */\r\n\r\n        //console.log(this.props.lang === 'fr' ? '../../assets/phone3d_fr.glb' : '../../assets/phone3d.glb');\r\n        const phone3d = require(this.props.lang === 'fr' ? '../assets/media/phone3d_fr.glb' : '../assets/media/phone3d.glb');\r\n        const texture = require('../text/matcap_03.jpg');\r\n        const matcap = new THREE.TextureLoader().load(texture.default, () => {\r\n            matcap.encoding = THREE.sRGBEncoding;\r\n\r\n            loader.load(\r\n                phone3d.default,\r\n                gltf => {\r\n                    if (this.phoneObject) {\r\n                        // Remove previously loaded object\r\n                        this.scene.remove(this.phoneObject);\r\n                    }\r\n                    this.phoneObject = gltf.scene || gltf.scenes[0];\r\n\r\n                    const box = new THREE.Box3().setFromObject(this.phoneObject);\r\n                    const size = box.getSize(new THREE.Vector3()).length();\r\n                    const center = box.getCenter(new THREE.Vector3());\r\n\r\n                    this.phoneObject.position.x += this.phoneObject.position.x - center.x;\r\n                    this.phoneObject.position.y += this.phoneObject.position.y - center.y;\r\n                    this.phoneObject.position.z += this.phoneObject.position.z - center.z;\r\n\r\n                    this.camera.position.copy(center);\r\n                    //this.camera.position.x += size / 10.0;\r\n                    //this.camera.position.y -= size / 3.0;\r\n                    this.camera.position.z += size;\r\n                    this.defaultCameraZ = this.camera.position.z;\r\n                    this.camera.lookAt(center);\r\n\r\n                    //Add material to iphone\r\n                    this.phoneObject.children[0].material = new THREE.MeshMatcapMaterial({\r\n                        matcap: matcap\r\n                    });\r\n\r\n                    //Add materials to screen\r\n                    //this.phoneObject.children[0].children[0].material = materialScreen;\r\n                    //this.phoneObject.children[0].children[1].material = materialNav;\r\n\r\n                    for (let i = 0; i < this.phoneObject.children[0].children.length; i++) {\r\n                        if (this.phoneObject.children[0].children[i].name === 'Ecran001') {\r\n                            this.screenObject = this.phoneObject.children[0].children[i];\r\n                        } else if (this.phoneObject.children[0].children[i].name === 'header_footer') {\r\n                            this.headerFooterObject = this.phoneObject.children[0].children[i];\r\n                        }\r\n                    }\r\n\r\n                    this.headerFooterObject.material = this.screenObject.material.clone();\r\n                    this.headerFooterObject.material.map = this.screenObject.material.map.clone();\r\n                    this.headerFooterObject.material.map.needsUpdate = true;\r\n\r\n                    this.scene.add(this.phoneObject);\r\n\r\n                    if (!this.isAnimated) {\r\n                        if (this.props.isForward) {\r\n                            this.forward(0, 0);\r\n                        } else {\r\n                            this.backward(0, 0);\r\n                        }\r\n                        if (this.props.onLoadingDone) {\r\n                            this.props.onLoadingDone();\r\n                        }\r\n                    }\r\n\r\n                    if (!this.isAnimated) {\r\n                        this.isAnimated = true;\r\n                        requestAnimationFrame(this.animate);\r\n                        document.addEventListener('mousemove', this.onMouseMove, false);\r\n                        window.addEventListener('deviceorientation', this.onDeviceRotation, false);\r\n                    }\r\n                    this.isLoading3D = false;\r\n                },\r\n                undefined,\r\n                error => {\r\n                    console.log('Error loading 3 obj:', error);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    onMouseMove(event) {\r\n        if (!this.naturalRotationEnabled) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n        this.naturalDestination = { x: event.clientX, y: event.clientY };\r\n    }\r\n\r\n    onDeviceRotation(event) {\r\n        if (!this.naturalRotationEnabled) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n        this.naturalDestination = { x: event.alpha + event.gamma * 5.0, y: (event.beta - 45.0) * 5.0 };\r\n    }\r\n\r\n    animate(time) {\r\n        if (!this.isAnimated) return;\r\n        requestAnimationFrame(this.animate);\r\n        this.update();\r\n        this.renderer.render(this.scene, this.camera);\r\n    }\r\n\r\n    logFn(from, to, friction, padding = 1) {\r\n        const diff = to - from;\r\n        if (to === from || Math.abs(diff) <= padding) {\r\n            return to;\r\n        }\r\n        return to - diff * friction;\r\n    }\r\n\r\n    update() {\r\n        if (this.naturalDestination) {\r\n            const destination = {\r\n                x: this.naturalDestination.x - window.innerWidth / 2.0,\r\n                y: this.naturalDestination.y - window.innerHeight / 2.0\r\n            };\r\n            this.rotateEnd.set(\r\n                this.logFn(this.rotateStart.x, destination.x, this.naturalFriction),\r\n                this.logFn(this.rotateStart.y, destination.y, this.naturalFriction)\r\n            );\r\n\r\n            this.rotateDelta.subVectors(this.rotateEnd, this.rotateStart).multiplyScalar(this.naturalRotateSpeed);\r\n            this.sphericalDelta.theta -= (2 * Math.PI * this.rotateDelta.x) / this.renderer.domElement.clientHeight;\r\n            this.sphericalDelta.phi -= (2 * Math.PI * this.rotateDelta.y) / this.renderer.domElement.clientHeight;\r\n            this.rotateStart.copy(this.rotateEnd);\r\n\r\n            let offset = new THREE.Vector3();\r\n            let quat = new THREE.Quaternion().setFromUnitVectors(this.camera.up, new THREE.Vector3(0, 1, 0));\r\n            let quatInverse = quat.clone().inverse();\r\n\r\n            offset.copy(this.camera.position).sub(this.target);\r\n            offset.applyQuaternion(quat);\r\n\r\n            this.spherical.setFromVector3(offset);\r\n            this.spherical.theta += this.sphericalDelta.theta;\r\n            this.spherical.phi += this.sphericalDelta.phi;\r\n            this.spherical.makeSafe();\r\n            this.spherical.radius *= 1.0;\r\n\r\n            offset.setFromSpherical(this.spherical);\r\n            offset.applyQuaternion(quatInverse);\r\n            this.camera.position.copy(this.target).add(offset);\r\n\r\n            this.camera.lookAt(this.target);\r\n            this.sphericalDelta.set(0, 0, 0);\r\n        }\r\n        if (this.phoneObject && this.baseRotation) {\r\n            this.phoneObject.rotation.x = this.logFn(\r\n                this.phoneObject.rotation.x,\r\n                this.baseRotation.x,\r\n                this.baseRotationFriction,\r\n                0.00001\r\n            );\r\n            this.phoneObject.rotation.y = this.logFn(\r\n                this.phoneObject.rotation.y,\r\n                this.baseRotation.y,\r\n                this.baseRotationFriction,\r\n                0.00001\r\n            );\r\n            this.phoneObject.rotation.z = this.logFn(\r\n                this.phoneObject.rotation.z,\r\n                this.baseRotation.z,\r\n                this.baseRotationFriction,\r\n                0.00001\r\n            );\r\n        }\r\n        if (this.zoomDestination) {\r\n            this.camera.position.z = this.logFn(this.camera.position.z, this.zoomDestination, this.zoomFriction, 0.1);\r\n        }\r\n        if (this.textureDestination) {\r\n            this.screenObject.material.map.offset.x = this.logFn(\r\n                this.screenObject.material.map.offset.x,\r\n                this.textureDestination.x,\r\n                this.textureFriction,\r\n                0.001\r\n            );\r\n            if (\r\n                this.screenObject.material.map.offset.x <= 0.001 ||\r\n                this.textureDestination.y >= this.screenObject.material.map.offset.y\r\n            ) {\r\n                this.screenObject.material.map.offset.y = this.logFn(\r\n                    this.screenObject.material.map.offset.y,\r\n                    this.textureDestination.y,\r\n                    this.textureFriction,\r\n                    0.001\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    updateBaseRotation(x, y, z) {\r\n        this.baseRotation = new THREE.Vector3((x * Math.PI) / 180, (y * Math.PI) / 180, (z * Math.PI) / 180);\r\n    }\r\n\r\n    toggleNaturalRotation(enabled) {\r\n        this.naturalRotationEnabled = enabled;\r\n        if (!this.naturalRotationEnabled) {\r\n            this.naturalDestination = { x: window.innerWidth / 2.0, y: window.innerHeight / 2.0 };\r\n        }\r\n    }\r\n\r\n    updateZoomPercentage(percentage) {\r\n        this.zoomDestination = this.defaultCameraZ / (1.0 + percentage);\r\n    }\r\n\r\n    updateTexture(x, y) {\r\n        this.textureDestination.x = x;\r\n        this.textureDestination.y = y;\r\n    }\r\n\r\n    forward(duration = 600, delay = 0) {\r\n        if (this.isForward) return;\r\n        this.isForward = true;\r\n        setTimeout(() => {\r\n            this.domContainer.style.transition = `all ease-out ${duration}ms`;\r\n            this.domContainer.style.transform = 'scale(1.0)';\r\n        }, delay);\r\n    }\r\n\r\n    backward(duration = 600, delay = 0) {\r\n        if (!this.isForward) return;\r\n        this.isForward = false;\r\n        setTimeout(() => {\r\n            this.domContainer.style.transition = `all ease-out ${duration}ms`;\r\n            this.domContainer.style.transform = 'scale(1.0)';\r\n        }, delay);\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"phone-3d-container\" ref={ref => (this.domContainer = ref)}></div>;\r\n    }\r\n}\r\n\r\nexport default Phone3D;\r\n","import logo from './logo.svg';\nimport './App.css';\n\nimport Phone3D from './components/Phone3D';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Phone3D/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}